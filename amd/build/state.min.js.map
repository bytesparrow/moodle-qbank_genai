{"version":3,"file":"state.min.js","sources":["../src/state.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Code for checking questions generation state.\n *\n * @package\n * @category    admin\n * @copyright   2023 Ruthy Salomon <ruthy.salomon@gmail.com> , Yedidia Klein <yedidia@openapp.co.il>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/templates'], function($, Ajax, Templates) {\n    // Load the state of the questions generation every 20 seconds.\n    var intervalId = setInterval(function() {\n        checkState(intervalId);\n    }, 20000);\n\n    /**\n     * Check the state of the questions generation.\n     * @param {int} intervalId The interval id.\n     * @return {void}\n     * @example\n     *  checkState(intervalId);\n     */\n    function checkState(intervalId) {\n        if(document.getElementById(\"qbank_genai_userid\") === null)\n        {   //nothing to check, value does not exist in DOM\n            return;\n        }\n        var userid = document.getElementById(\"qbank_genai_userid\").textContent.trim();\n        var uniqid = document.getElementById(\"qbank_genai_uniqid\").textContent.trim();\n        var courseid = document.getElementById(\"qbank_genai_courseid\").textContent.trim();\n        var promises = Ajax.call([{\n            methodname: 'qbank_genai_check_state',\n            args: {\n                userid: userid,\n                uniqid: uniqid\n            }\n        }]);\n        promises[0].then(function(showSuccess) {\n            // If Questions are ready, show success message.\n            if (showSuccess[0].success != '') {\n                var successmessage = JSON.parse(showSuccess[0].success);\n                if (Object.keys(successmessage).length == 1) {\n                    var single = true;\n                } else {\n                    var single = false;\n                }\n                if (showSuccess[0].success == \"0\") { //Error (probably question not created after n tries).\n                    var error = showSuccess[0].tries;\n                } else {\n                    var error = '';\n                }\n                Templates.render('qbank_genai/success', { success: successmessage,\n                                                                courseid: courseid,\n                                                                wwwroot: M.cfg.wwwroot,\n                                                                error: error,\n                                                                single: single }).then(function(html) {\n                    $(\"#qbank_genai_success\").html(html);\n                });\n                // Stop checking the state while questions are ready.\n                clearInterval(intervalId);\n            }\n            // Show info if exists.\n            if (showSuccess[0].tries !== null) {\n                // If the questions are ready, show 100%.\n                if (showSuccess[0].success != '') {\n                    var percent = 100;\n                } else {\n                    var percent = Math.round((showSuccess[0].tries / showSuccess[0].numoftries) * 100);\n                }\n                Templates.render('qbank_genai/info', { tries: showSuccess[0].tries,\n                                                             numoftries: showSuccess[0].numoftries,\n                                                             percent: percent }).then(function(html) {\n                    $(\"#qbank_genai_info\").html(html);\n                });\n            }\n        });\n    }\n});\n"],"names":["define","$","Ajax","Templates","intervalId","setInterval","document","getElementById","userid","textContent","trim","uniqid","courseid","call","methodname","args","then","showSuccess","success","successmessage","JSON","parse","Object","keys","length","single","error","tries","render","wwwroot","M","cfg","html","clearInterval","percent","Math","round","numoftries","checkState"],"mappings":";;;;;;;;AAwBAA,2BAAO,CAAC,SAAU,YAAa,mBAAmB,SAASC,EAAGC,KAAMC,eAE5DC,WAAaC,aAAY,qBAWTD,eACqC,OAAlDE,SAASC,eAAe,iCAIvBC,OAASF,SAASC,eAAe,sBAAsBE,YAAYC,OACnEC,OAASL,SAASC,eAAe,sBAAsBE,YAAYC,OACnEE,SAAWN,SAASC,eAAe,wBAAwBE,YAAYC,OAC5DR,KAAKW,KAAK,CAAC,CACtBC,WAAY,0BACZC,KAAM,CACFP,OAAQA,OACRG,OAAQA,WAGP,GAAGK,MAAK,SAASC,gBAEQ,IAA1BA,YAAY,GAAGC,QAAe,KAC1BC,eAAiBC,KAAKC,MAAMJ,YAAY,GAAGC,YACL,GAAtCI,OAAOC,KAAKJ,gBAAgBK,WACxBC,QAAS,OAETA,QAAS,KAEa,KAA1BR,YAAY,GAAGC,YACXQ,MAAQT,YAAY,GAAGU,WAEvBD,MAAQ,GAEhBvB,UAAUyB,OAAO,sBAAuB,CAAEV,QAASC,eACHP,SAAUA,SACViB,QAASC,EAAEC,IAAIF,QACfH,MAAOA,MACPD,OAAQA,SAAUT,MAAK,SAASgB,MAC5E/B,EAAE,wBAAwB+B,KAAKA,SAGnCC,cAAc7B,eAGW,OAAzBa,YAAY,GAAGU,MAAgB,IAED,IAA1BV,YAAY,GAAGC,YACXgB,QAAU,SAEVA,QAAUC,KAAKC,MAAOnB,YAAY,GAAGU,MAAQV,YAAY,GAAGoB,WAAc,KAElFlC,UAAUyB,OAAO,mBAAoB,CAAED,MAAOV,YAAY,GAAGU,MAChBU,WAAYpB,YAAY,GAAGoB,WAC3BH,QAASA,UAAWlB,MAAK,SAASgB,MAC3E/B,EAAE,qBAAqB+B,KAAKA,aA5DxCM,CAAWlC,cACZ"}